// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: oauth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OAuthService_GenerateAuthCode_FullMethodName   = "/OAuthService/GenerateAuthCode"
	OAuthService_AuthorizeToken_FullMethodName     = "/OAuthService/AuthorizeToken"
	OAuthService_ClientCredentGrant_FullMethodName = "/OAuthService/ClientCredentGrant"
	OAuthService_PasswordTokenGrant_FullMethodName = "/OAuthService/PasswordTokenGrant"
	OAuthService_RefreshTokenGrant_FullMethodName  = "/OAuthService/RefreshTokenGrant"
)

// OAuthServiceClient is the client API for OAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthServiceClient interface {
	// grpc is not support browser redirect, so it will handle another services
	// planning is create new endpoint on grpc when try to get new credentials
	GenerateAuthCode(ctx context.Context, in *GenerateCodeRequest, opts ...grpc.CallOption) (*GenerateCodeResponse, error)
	AuthorizeToken(ctx context.Context, in *AuthCodeGrantRequest, opts ...grpc.CallOption) (*AuthCodeGrantResponse, error)
	// client credential flow
	// get credentials basic token
	ClientCredentGrant(ctx context.Context, in *ClientCredentGrantRequest, opts ...grpc.CallOption) (*ClientCredentGrantResponse, error)
	// password flow
	// require credentuials / kuje oasswird and user name
	PasswordTokenGrant(ctx context.Context, in *CredentialsGrantRequest, opts ...grpc.CallOption) (*CredentialsGrantResponse, error)
	// refresh token flow
	RefreshTokenGrant(ctx context.Context, in *RefreshTokenGrantRequest, opts ...grpc.CallOption) (*RefreshTokenGrantResponse, error)
}

type oAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthServiceClient(cc grpc.ClientConnInterface) OAuthServiceClient {
	return &oAuthServiceClient{cc}
}

func (c *oAuthServiceClient) GenerateAuthCode(ctx context.Context, in *GenerateCodeRequest, opts ...grpc.CallOption) (*GenerateCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateCodeResponse)
	err := c.cc.Invoke(ctx, OAuthService_GenerateAuthCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) AuthorizeToken(ctx context.Context, in *AuthCodeGrantRequest, opts ...grpc.CallOption) (*AuthCodeGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthCodeGrantResponse)
	err := c.cc.Invoke(ctx, OAuthService_AuthorizeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) ClientCredentGrant(ctx context.Context, in *ClientCredentGrantRequest, opts ...grpc.CallOption) (*ClientCredentGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientCredentGrantResponse)
	err := c.cc.Invoke(ctx, OAuthService_ClientCredentGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) PasswordTokenGrant(ctx context.Context, in *CredentialsGrantRequest, opts ...grpc.CallOption) (*CredentialsGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CredentialsGrantResponse)
	err := c.cc.Invoke(ctx, OAuthService_PasswordTokenGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) RefreshTokenGrant(ctx context.Context, in *RefreshTokenGrantRequest, opts ...grpc.CallOption) (*RefreshTokenGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenGrantResponse)
	err := c.cc.Invoke(ctx, OAuthService_RefreshTokenGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthServiceServer is the server API for OAuthService service.
// All implementations must embed UnimplementedOAuthServiceServer
// for forward compatibility.
type OAuthServiceServer interface {
	// grpc is not support browser redirect, so it will handle another services
	// planning is create new endpoint on grpc when try to get new credentials
	GenerateAuthCode(context.Context, *GenerateCodeRequest) (*GenerateCodeResponse, error)
	AuthorizeToken(context.Context, *AuthCodeGrantRequest) (*AuthCodeGrantResponse, error)
	// client credential flow
	// get credentials basic token
	ClientCredentGrant(context.Context, *ClientCredentGrantRequest) (*ClientCredentGrantResponse, error)
	// password flow
	// require credentuials / kuje oasswird and user name
	PasswordTokenGrant(context.Context, *CredentialsGrantRequest) (*CredentialsGrantResponse, error)
	// refresh token flow
	RefreshTokenGrant(context.Context, *RefreshTokenGrantRequest) (*RefreshTokenGrantResponse, error)
	mustEmbedUnimplementedOAuthServiceServer()
}

// UnimplementedOAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOAuthServiceServer struct{}

func (UnimplementedOAuthServiceServer) GenerateAuthCode(context.Context, *GenerateCodeRequest) (*GenerateCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAuthCode not implemented")
}
func (UnimplementedOAuthServiceServer) AuthorizeToken(context.Context, *AuthCodeGrantRequest) (*AuthCodeGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeToken not implemented")
}
func (UnimplementedOAuthServiceServer) ClientCredentGrant(context.Context, *ClientCredentGrantRequest) (*ClientCredentGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientCredentGrant not implemented")
}
func (UnimplementedOAuthServiceServer) PasswordTokenGrant(context.Context, *CredentialsGrantRequest) (*CredentialsGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordTokenGrant not implemented")
}
func (UnimplementedOAuthServiceServer) RefreshTokenGrant(context.Context, *RefreshTokenGrantRequest) (*RefreshTokenGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenGrant not implemented")
}
func (UnimplementedOAuthServiceServer) mustEmbedUnimplementedOAuthServiceServer() {}
func (UnimplementedOAuthServiceServer) testEmbeddedByValue()                      {}

// UnsafeOAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthServiceServer will
// result in compilation errors.
type UnsafeOAuthServiceServer interface {
	mustEmbedUnimplementedOAuthServiceServer()
}

func RegisterOAuthServiceServer(s grpc.ServiceRegistrar, srv OAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedOAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OAuthService_ServiceDesc, srv)
}

func _OAuthService_GenerateAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GenerateAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_GenerateAuthCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GenerateAuthCode(ctx, req.(*GenerateCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_AuthorizeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthCodeGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).AuthorizeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_AuthorizeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).AuthorizeToken(ctx, req.(*AuthCodeGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_ClientCredentGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCredentGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).ClientCredentGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_ClientCredentGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).ClientCredentGrant(ctx, req.(*ClientCredentGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_PasswordTokenGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialsGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).PasswordTokenGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_PasswordTokenGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).PasswordTokenGrant(ctx, req.(*CredentialsGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_RefreshTokenGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).RefreshTokenGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthService_RefreshTokenGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).RefreshTokenGrant(ctx, req.(*RefreshTokenGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthService_ServiceDesc is the grpc.ServiceDesc for OAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OAuthService",
	HandlerType: (*OAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAuthCode",
			Handler:    _OAuthService_GenerateAuthCode_Handler,
		},
		{
			MethodName: "AuthorizeToken",
			Handler:    _OAuthService_AuthorizeToken_Handler,
		},
		{
			MethodName: "ClientCredentGrant",
			Handler:    _OAuthService_ClientCredentGrant_Handler,
		},
		{
			MethodName: "PasswordTokenGrant",
			Handler:    _OAuthService_PasswordTokenGrant_Handler,
		},
		{
			MethodName: "RefreshTokenGrant",
			Handler:    _OAuthService_RefreshTokenGrant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth.proto",
}
